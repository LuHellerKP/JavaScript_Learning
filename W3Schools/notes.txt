JavaScript can change HTML content.
    One of JS methods is getElementById().
    Ex.: document.getElementById("demo").innerHTML = "Hello JavaScript";
        Explanation:
            document - the HTML document
            getElementById() - the method
            "demo" - the id of the HTML element to change
            innerHTML - the property used to change the HTML content
            "Hello JavaScript" - the new content
    Obs.: Js accepts both double and single quotes.

JavaScript can change HTML attribute values.
    Ex.: changing the value of the src(source) attribute of an <img>
    (see the example in the file)

JavaScript can change HTML styles (CSS).
    Ex.: document.getElementById("demo").style.fontSize = "35px";
        Explanation:
            document - the HTML document
            getElementById() - the method
            "demo" - the id of the HTML element to change
            style - the property used to change the style
            fontSize - the property used to change the font size
            "35px" - the new font size

JavaScript can hide HTML elements.
    Can be done by changing the display style:
        Ex.: document.getElementById("demo").style.display = "none";
            Explanation:
                document - the HTML document
                getElementById() - the method
                "demo" - the id of the HTML element to change
                style - the property used to change the style
                display - the property used to change the display
                "none" - the new display style

JavaScript can show HTML elements.
    Can be done by changing the display style:
        Ex.: document.getElementById("demo").style.display = "block";
            Explanation:
                document - the HTML document
                getElementById() - the method
                "demo" - the id of the HTML element to change
                style - the property used to change the style
                display - the property used to change the display
                "block" - the new display style


The <script> Tag
    In HTMLm JavaScript code is placed between <script> and </script> tags.
    Ex.: 
        <script>
            document.getElementById("demo").innerHTML = "My First JavaScript";
        </script>

JavaScript Functions and Events
    'function' is a block of code that executes when called. 
    For example, it can be called when an 'event' occurs, like when a user clicks on a button.

JavaScript in <head> or <body>
    It's possible to place any number of scripts in an HTML document, and they can be placed in the <body>, or in the <head> section of an HTML page, or in both.   

JavaScript in <head>
    Example with a function placed in the <head> section, where it is called when a button is clicked.
    (see the example in the file)

JavaScript in <body>
    Example with a function placed in the <body> section, where it is called when a button is clicked.
    (see the example in the file)

External JavaScript
    Scripts can be placed in external files.
    This is usefull whe the same code is used in many different web pages.
    The file extension is '.js'.
    To use an external script, put the name of the script file in the src (source) attribute of a <script> tag. 
        Ex.: <script src="myScript.js"></script>
    The external script reference can be placed both in <head> and <body>.

    Advantages:
        It separates HTML and code
        It makes HTML and JavaScript easier to read and maintain
        Cached JavaScript files can speed up page loads
    
    To add several script files to one page, use several script tags:
        Ex.: <script src="myScript1.js"></script>
             <script src="myScript2.js"></script>
    
    References: 3 ways to reference an external script
        1. With a full URL 
            Ex.: <script src="https://www.w3schools.com/js/myScript1.js"></script>
        2. With a file path (/js/)
            Ex.: <script src="/js/myScript1.js"></script>
        3. Without any path
            Ex.: <script src="myScript1.js"></script>

JavaScript Display Possibilities
    The data can be displayed in different ways:
        Writing into an HTML element, using innerHTML
        Writing into the HTML output using document.write()
        Writing into an alert box, using window.alert()
        Writing into the browser console, using console.log()

Using innerHTML
    Access an HTML element.
    document.getElementById(id) method.
    The id attribute defines the HTML element.
    The innerHTML property defines the HTML content.
    Ex.: <p id="demo"></p>
         <script>
            document.getElementById("demo").innerHTML = 5 + 6;
         </script>

Using document.write()
    (see the example in the file)
    Obs.: Using document.write() after an HTML document is loaded, will delete all existing HTML.   
    This method should only be used for testing.

Using window.alert()
    It is possible to use an alert box to display data.
    Ex.: window.alert(5 + 6);
    (see the example in the file)
    Obs.: The 'window' keyword can be omitted since it is the global object. That means that variables, properties and methods by default belong to the window object.

Using console.log()
    Used mainly for debugging purposes.
    It is a method that can be called in the browser to display data.
    (see the example in the file)

JavaScript Print
    JavaScript does not have print objects or methods.
    It is not possible to access output devices from JavaScript.
    Exception:
        call the window.print() method in the browser to print the content of the current window.   
        (see the example in the file)

JavaScript Programs
    A computer program == list of "instructions" to be "executed" by a computer.
    These "instructions" are called statements.
    A JavaScript program/code == list of programming statements.

JavaScript Statements
    Composed of:
        Values;
        Operators;
        Expressions;
        Keywords;
        Comments.
    Ex.: document.getElementById("demo").innerHTML = "Hello Dolly.";
        Explanation:
            This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo". 
    
    The statements are executed, one by one, in the same order as they are written.

Semicolons ';'
    Separate JavaScript statements.
    Ex.: var x, y, z; // Statement 1
         x = 5;       // Statement 2
         y = 6;       // Statement 3
         z = x + y;   // Statement 4
    When separated, multiple statements on one line are allowed.
    Ex.: var x = 5; var y = 6; var z = x + y;
    Obs.: It is not necessary but recommended.

JavaScript White Space
    JS ignores multiple spaces.
    That means you can add white spaces to your script to make it more readable.
    Ex.: var person = "Hege";
         var person="Hege";
         var person =    "Hege";

JavaScript Line Length and Line Breaks
    Programmers often like to avoid code lines longer than 80 characters.
    If a JavaScript statement does not fit on one line, the best place to break it is after an operator or a comma. 
    Ex.: document.getElementById("demo").innerHTML =
         "Hello Dolly!";

JavaScript Code Blocks
    Statements can be grouped together inside code blocks '{...}'.
    This is useful when JavaScript statements are to be executed together.
    It is found in functions.
    Ex.: function myFunction() {
            document.getElementById("demo1").innerHTML = "Hello Dolly!";
            document.getElementById("demo2").innerHTML = "How are you?";
         }

JavaScript Keywords
    var - declares a variable (tells the browser to create variables)
    let - declares a block variable (tells the browser to create variables)
    const - declares a constant (read-only)
    if - marks a block of statements to be executed, depending on a condition
    switch - marks a block of statements to be executed in different cases
    for - marks a block of statements to be executed repeatedly, until a condition is met (in a loop)
    function - declares a function
    return - exits a function
    try - implements error handling to a block of statements

JavaScript Syntax
    Set of rules, how JavaScript programs are constructed.
    Ex.:    //How to create variables:
            var x;
            let y;
            //How to use variables:
            x = 5;
            y = 6;
            let z = x + y;

JavaScript Values
    Two types of values:
        Fixed values - literals
            Two important syntax rules:
                1. Numbers are witten with or without decimals.
                    Ex.: 10.50 or 1001
                2. Strings are text, written within double or single quotes.
                    Ex.: "John Doe" or 'John Doe'

        Variable values - variables
            Used to store data values.
            Keywords: var, let, const to declare variables.
            Equal sign '=' is used to assign values to variables.
            Ex.:    let x; // x is defined as a variable.
                    x = 6; // x is assigned the value 6.

JavaScript Operators    
    Arithmetic Operators (+ - * / ) used to compute values.
    Assignment Operators (=) used to assign values to variables.

JavaScript Expressions
    Combination of Values, Variables and Operators, which computes to a value.
    Computation == evaluation.
    Ex.: 5 * 10 = 50 --> 5 * 10 evaluates to 50

JavaScript Identifiers / Names
    Used to name: variables keywords, functions, and labels.
    Name must begin with:
        A letter (A-Z or a-z)
        A dollar sign ($)
        Or an underscore (_)

JavaScript is Case Sensitive
    Ex.: lastName = "Johnson";
         lastname = "Peterson";
         Both are valid but different variables.
    Use Camel Case.
    